on:
  workflow_run:
    workflows: ["Dotenv Loader"]
    types:
      - completed

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [20.x]
    
    environment:
      name: your_environment_file.env

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5

      - name: checkout
        uses: actions/checkout@v2

      # Get tag name so a proper package name can be generated
      - name: Get tag
        id: getTag
        # You may pin to the exact commit or the version.
        uses: dawidd6/action-get-tag@v1.1.0

      - name: GetPackageName
        id: getPackageName
        run: |
         $PackageName = "${{ env.PACKAGE_OUTPUT_BASE_NAME }}_${{ steps.getTag.outputs.tag }}"
         echo "::set-output name=PackageName::$PackageName"
         if ($env:GITHUB_ACTIONS -eq "true") {
         Write-Host "Package Name is $PackageName"
         }
      
      - name: Use DuckStation PFX
        run: echo "${{ secrets.SIGNING_CERTIFICATE }}" > duckstation-uwp_TemporaryKey.pfx
        
      - name: App build
        run: |
          msbuild $env.SOLUTION_PATH 
          /p:Platform=$env.PLATFORM 
          /p:Configuration=$env.CONFIGURATION 
          /p:UapAppxPackageBuildMode=$env.BUILD_MODE 
          /p:AppxBundle=$env.APPX_BUNDLE 
          /p:PackageCertificateKeyFile=$env.SIGNING_CERTIFICATE 
          /p:PackageCertificatePassword=${{ secrets.PFX_PASSWORD }}
          /p:AppxPackageTestDir="${{ env.PACKAGE_OUTPUT_ROOT_DIR }}\${{ steps.getPackageName.outputs.PackageName }}\"          
          /restore

      - name: Remove the .pfx
        run: Remove-Item -path $env.PROJECT_DIRECTORY/$env.SIGNING_CERTIFICATE

      - name: Clean package
        run: | 
          $PackagePath = "${{ env.PACKAGE_OUTPUT_ROOT_DIR }}\${{steps.getPackageName.outputs.PackageName}}"
          Remove-Item -Recurse -path $PackagePath/Add-AppDevPackage.resources
          Remove-Item -Recurse -path $PackagePath/TelemetryDependencies
          Remove-Item -Recurse -path $PackagePath/Dependencies/arm
          Remove-Item -Recurse -path $PackagePath/Dependencies/arm64
          Remove-Item -Recurse -path $PackagePath/Dependencies/x86
          Remove-Item -path $PackagePath/Add-AppDevPackage.ps1
          Remove-Item -Recurse -path $PackagePath/Install.ps1
          
      - name: Create archive
        run: |
          $PackagePath = "${{ env.PACKAGE_OUTPUT_ROOT_DIR }}\${{steps.getPackageName.outputs.PackageName}}"
          Compress-Archive -Path $PackagePath\* -DestinationPath "$PackagePath.zip"
          dir "${{ env.PACKAGE_OUTPUT_ROOT_DIR }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: duckstation-package
          path: "${{ env.PACKAGE_OUTPUT_ROOT_DIR }}\\${{steps.getPackageName.outputs.PackageName}}.zip"
