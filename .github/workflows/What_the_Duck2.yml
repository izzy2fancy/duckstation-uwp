name: Duck-Building Workflow

on:
  workflow_dispatch:

jobs:
  Build:
    runs-on: windows-latest

    steps:
      - name: Load environment variables
        run: |
          echo "APPX_BUNDLE=${{ vars.APPX_BUNDLE }}" >> $GITHUB_ENV
          echo "BUILD_MODE=${{ vars.BUILD_MODE }}" >> $GITHUB_ENV
          echo "CONFIGURATION=${{ vars.CONFIGURATION }}" >> $GITHUB_ENV
          echo "NUGET_VERSION=${{ vars.NUGET_VERSION }}" >> $GITHUB_ENV
          echo "PACKAGE_OUTPUT_BASE_NAME=${{ vars.PACKAGE_OUTPUT_BASE_NAME }}" >> $GITHUB_ENV
          echo "PACKAGE_OUTPUT_DIR=${{ vars.PACKAGE_OUTPUT_DIR }}" >> $GITHUB_ENV
          echo "PACKAGE_OUTPUT_ROOT_DIR=${{ vars.PACKAGE_OUTPUT_ROOT_DIR }}" >> $GITHUB_ENV
          echo "PLATFORM=${{ vars.PLATFORM }}" >> $GITHUB_ENV
          echo "PROJECT_DIRECTORY=${{ vars.PROJECT_DIRECTORY }}" >> $GITHUB_ENV
          echo "PROJECT_PATH=${{ vars.PROJECT_PATH }}" >> $GITHUB_ENV        
          echo "SOLUTION_PATH=${{ vars.SOLUTION_PATH }}" >> $GITHUB_ENV

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v2
        with: 
          msbuild-architecture: x64
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.0     

      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Get Package Name
        id: get_package_name
        run: |
         $TAG_VERSION="v1.0.0"
         $PACKAGE_NAME="${{ env.PACKAGE_OUTPUT_BASE_NAME }}_$TAG_VERSION"
         echo "::set-output name=PACKAGE_NAME::$PACKAGE_NAME"
         Write-Host "Package Name is $PACKAGE_NAME"      
       
      - name: App Build
        run: |
          msbuild ${{ vars.PROJECT_PATH }}
          /p:Platform=${{ vars.PLATFORM }}
          /p:Configuration=${{ vars.CONFIGURATION }}
          /p:UapAppxPackageBuildMode=${{ vars.BUILD_MODE }}
          /p:AppxBundle=${{ vars.APPX_BUNDLE }}
          /p:PackageCertificateKeyFile=${{ secrets.DUCKSTATION_PFX }}
          /p:PackageCertificatePassword=${{ secrets.PFX_PASSWORD }}
          /p:AppxPackageTestDir="${{ vars.PACKAGE_OUTPUT_ROOT_DIR }}\${{ vars.PACKAGE_OUTPUT_BASE_NAME }}"
          /restore
